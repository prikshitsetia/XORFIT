[{"C:\\Users\\karigar_s\\Documents\\GitHub\\XORFIT\\client\\xorfit\\src\\index.js":"1","C:\\Users\\karigar_s\\Documents\\GitHub\\XORFIT\\client\\xorfit\\src\\reportWebVitals.js":"2","C:\\Users\\karigar_s\\Documents\\GitHub\\XORFIT\\client\\xorfit\\src\\App.js":"3","C:\\Users\\karigar_s\\Documents\\GitHub\\XORFIT\\client\\xorfit\\src\\components\\Home.js":"4","C:\\Users\\karigar_s\\Documents\\GitHub\\XORFIT\\client\\xorfit\\src\\components\\Nav.js":"5","C:\\Users\\karigar_s\\Documents\\GitHub\\XORFIT\\client\\xorfit\\src\\components\\Yoga.js":"6","C:\\Users\\karigar_s\\Documents\\GitHub\\XORFIT\\client\\xorfit\\src\\components\\Register.js":"7","C:\\Users\\karigar_s\\Documents\\GitHub\\XORFIT\\client\\xorfit\\src\\components\\Options.js":"8","C:\\Users\\karigar_s\\Documents\\GitHub\\XORFIT\\client\\xorfit\\src\\components\\Meditation.js":"9","C:\\Users\\karigar_s\\Documents\\GitHub\\XORFIT\\client\\xorfit\\src\\components\\Login.js":"10","C:\\Users\\karigar_s\\Documents\\GitHub\\XORFIT\\client\\xorfit\\src\\components\\Player.js":"11","C:\\Users\\karigar_s\\Documents\\GitHub\\XORFIT\\client\\xorfit\\src\\components\\Controls.js":"12","C:\\Users\\karigar_s\\Documents\\GitHub\\XORFIT\\client\\xorfit\\src\\components\\Details.js":"13"},{"size":565,"mtime":1608128724465,"results":"14","hashOfConfig":"15"},{"size":375,"mtime":1608128724467,"results":"16","hashOfConfig":"15"},{"size":1284,"mtime":1608288881059,"results":"17","hashOfConfig":"15"},{"size":376,"mtime":1608135436127,"results":"18","hashOfConfig":"15"},{"size":723,"mtime":1608206873499,"results":"19","hashOfConfig":"15"},{"size":1846,"mtime":1608206465514,"results":"20","hashOfConfig":"15"},{"size":5973,"mtime":1608288922780,"results":"21","hashOfConfig":"15"},{"size":5214,"mtime":1608288881135,"results":"22","hashOfConfig":"15"},{"size":3620,"mtime":1608289361313,"results":"23","hashOfConfig":"15"},{"size":4302,"mtime":1608230265146,"results":"24","hashOfConfig":"15"},{"size":1574,"mtime":1608288881170,"results":"25","hashOfConfig":"15"},{"size":821,"mtime":1608281427596,"results":"26","hashOfConfig":"15"},{"size":423,"mtime":1608288881064,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1thu545",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},"C:\\Users\\karigar_s\\Documents\\GitHub\\XORFIT\\client\\xorfit\\src\\index.js",[],"C:\\Users\\karigar_s\\Documents\\GitHub\\XORFIT\\client\\xorfit\\src\\reportWebVitals.js",[],"C:\\Users\\karigar_s\\Documents\\GitHub\\XORFIT\\client\\xorfit\\src\\App.js",["56"],"C:\\Users\\karigar_s\\Documents\\GitHub\\XORFIT\\client\\xorfit\\src\\components\\Home.js",[],"C:\\Users\\karigar_s\\Documents\\GitHub\\XORFIT\\client\\xorfit\\src\\components\\Nav.js",[],"C:\\Users\\karigar_s\\Documents\\GitHub\\XORFIT\\client\\xorfit\\src\\components\\Yoga.js",[],"C:\\Users\\karigar_s\\Documents\\GitHub\\XORFIT\\client\\xorfit\\src\\components\\Register.js",[],"C:\\Users\\karigar_s\\Documents\\GitHub\\XORFIT\\client\\xorfit\\src\\components\\Options.js",["57","58","59","60"],"import React, { Component } from \"react\";\r\nimport yoga from \"../yoga1.jpg\";\r\nimport yogaButton from \"../yoga-button.png\";\r\nimport meditationButton from \"../meditation-button.png\";\r\nimport excerciseButton from \"../excercise-button.png\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class Options extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.myRef = React.createRef();\r\n    this.state = {\r\n      min: \"0\",\r\n      sec: \"0\",\r\n      time: \"0\",\r\n      showMedOptions: false,\r\n    };\r\n  }\r\n  handelChange = (e) => {\r\n    this.setState({ option: e.target.name });\r\n    if (e.target.name === \"yogaButton\") {\r\n      this.props.history.push(\"/yoga\");\r\n    } else if (e.target.name === \"excerciseButton\") {\r\n      this.props.history.push(\"/excercise\");\r\n    } else {\r\n      this.setState({\r\n        showMedOptions: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  onMedClick = (e) => {\r\n    console.log(e.target.name);\r\n    this.props.history.push(\"/meditation/\" + e.target.name);\r\n  };\r\n\r\n  setClock = (e) => {\r\n    this.setState({\r\n      time: this.state.min + \":\" + this.state.sec,\r\n    });\r\n    e.target.style.display = \"none\";\r\n  };\r\n\r\n  onTimeChange = (e) => {\r\n    // console.log(e.target)\r\n    if (e.target.value <= 60) {\r\n      this.setState({\r\n        [e.target.name]: e.target.value,\r\n      });\r\n    } else {\r\n      alert(\"Enter Valid Time\");\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <br />\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6\">\r\n            <img src={yoga} className=\"imageAnim\" alt=\"Yoga\" />\r\n          </div>\r\n\r\n          <div className=\"col-md-6\">\r\n            <div id=\"alarm-dialog\">\r\n              <h2>Set Timer</h2>\r\n\r\n              <label className=\"minutes\">\r\n                Minutes\r\n                <input\r\n                  type=\"number\"\r\n                  min=\"0\"\r\n                  max=\"60\"\r\n                  value={this.state.min}\r\n                  name=\"min\"\r\n                  onChange={this.onTimeChange}\r\n                  placeholder=\"0\"\r\n                />\r\n              </label>\r\n              <span id=\"alarm-colon\">:</span>\r\n              <label className=\"seconds\">\r\n                Seconds\r\n                <input\r\n                  type=\"number\"\r\n                  min=\"0\"\r\n                  max=\"60\"\r\n                  value={this.state.sec}\r\n                  name=\"sec\"\r\n                  onChange={this.onTimeChange}\r\n                  placeholder=\"0\"\r\n                />\r\n              </label>\r\n\r\n              <div className=\"button-holder\">\r\n                <button\r\n                  id=\"alarm-set\"\r\n                  className=\"btn btn-alarm\"\r\n                  style={{ width: \"20%\" }}\r\n                  onClick={this.setClock}\r\n                  ref={this.myRef}\r\n                >\r\n                  Set\r\n                </button>\r\n                <button\r\n                  id=\"alarm-clear\"\r\n                  className=\"btn btn-alarm\"\r\n                  style={{ width: \"20%\" }}\r\n                  onClick={() => {\r\n                    this.myRef.current.style.display = \"inline\";\r\n                    this.setState({\r\n                      min: 0,\r\n                      sec: 0,\r\n                    });\r\n                  }}\r\n                >\r\n                  Clear\r\n                </button>\r\n              </div>\r\n            </div>\r\n\r\n            <div id=\"activity-dialog\">\r\n              <h2>Select Activity</h2>\r\n              <button className=\"btn\">\r\n                <img\r\n                  src={yogaButton}\r\n                  height=\"140\"\r\n                  name=\"yogaButton\"\r\n                  onClick={this.handelChange}\r\n                ></img>\r\n              </button>\r\n              <button className=\"btn\">\r\n                <img\r\n                  src={meditationButton}\r\n                  height=\"140\"\r\n                  name=\"meditationButton\"\r\n                  onClick={this.handelChange}\r\n                ></img>\r\n              </button>\r\n              <button className=\"btn\">\r\n                <img\r\n                  src={excerciseButton}\r\n                  height=\"140\"\r\n                  name=\"excerciseButton\"\r\n                  onClick={this.handelChange}\r\n                ></img>\r\n              </button>\r\n            </div>\r\n            {this.state.showMedOptions ? (\r\n              <div id=\"med-dialog\">\r\n                <h2>Select Meditation Type</h2>\r\n                <button\r\n                  className=\"btn btn-alarm\"\r\n                  name=\"mindfullness\"\r\n                  onClick={this.onMedClick}\r\n                >\r\n                  Mindfulness\r\n                </button>\r\n                <button\r\n                  className=\"btn btn-alarm\"\r\n                  name=\"stress\"\r\n                  onClick={this.onMedClick}\r\n                >\r\n                  Stress Relieve\r\n                </button>\r\n                <button\r\n                  className=\"btn btn-alarm\"\r\n                  name=\"anxiety\"\r\n                  onClick={this.onMedClick}\r\n                >\r\n                  Anxiety Relieve\r\n                </button>\r\n              </div>\r\n            ) : null}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n",["61","62"],"C:\\Users\\karigar_s\\Documents\\GitHub\\XORFIT\\client\\xorfit\\src\\components\\Meditation.js",["63","64"],"C:\\Users\\karigar_s\\Documents\\GitHub\\XORFIT\\client\\xorfit\\src\\components\\Login.js",["65"],"C:\\Users\\karigar_s\\Documents\\GitHub\\XORFIT\\client\\xorfit\\src\\components\\Player.js",[],"C:\\Users\\karigar_s\\Documents\\GitHub\\XORFIT\\client\\xorfit\\src\\components\\Controls.js",[],"C:\\Users\\karigar_s\\Documents\\GitHub\\XORFIT\\client\\xorfit\\src\\components\\Details.js",[],{"ruleId":"66","severity":1,"message":"67","line":1,"column":8,"nodeType":"68","messageId":"69","endLine":1,"endColumn":11},{"ruleId":"66","severity":1,"message":"70","line":6,"column":10,"nodeType":"68","messageId":"69","endLine":6,"endColumn":14},{"ruleId":"71","severity":1,"message":"72","line":99,"column":43,"nodeType":"73","endLine":99,"endColumn":124},{"ruleId":"71","severity":1,"message":"72","line":100,"column":43,"nodeType":"73","endLine":100,"endColumn":136},{"ruleId":"71","severity":1,"message":"72","line":101,"column":43,"nodeType":"73","endLine":101,"endColumn":134},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"66","severity":1,"message":"78","line":3,"column":8,"nodeType":"68","messageId":"69","endLine":3,"endColumn":10},{"ruleId":"79","severity":1,"message":"80","line":49,"column":6,"nodeType":"81","endLine":49,"endColumn":24,"suggestions":"82"},{"ruleId":"83","severity":1,"message":"84","line":131,"column":17,"nodeType":"73","endLine":131,"endColumn":29},"no-unused-vars","'Nav' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-native-reassign",["85"],"no-negated-in-lhs",["86"],"'bg' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'songs.length'. Either include it or remove the dependency array.","ArrayExpression",["87"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation",{"desc":"88","fix":"89"},"Update the dependencies array to be: [currentSongIndex, songs.length]",{"range":"90","text":"91"},[1277,1295],"[currentSongIndex, songs.length]"]