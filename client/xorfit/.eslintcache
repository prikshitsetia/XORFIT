[{"C:\\Users\\karigar_s\\Documents\\GitHub\\XORFIT\\client\\xorfit\\src\\index.js":"1","C:\\Users\\karigar_s\\Documents\\GitHub\\XORFIT\\client\\xorfit\\src\\reportWebVitals.js":"2","C:\\Users\\karigar_s\\Documents\\GitHub\\XORFIT\\client\\xorfit\\src\\App.js":"3","C:\\Users\\karigar_s\\Documents\\GitHub\\XORFIT\\client\\xorfit\\src\\components\\Home.js":"4","C:\\Users\\karigar_s\\Documents\\GitHub\\XORFIT\\client\\xorfit\\src\\components\\Nav.js":"5","C:\\Users\\karigar_s\\Documents\\GitHub\\XORFIT\\client\\xorfit\\src\\components\\Yoga.js":"6","C:\\Users\\karigar_s\\Documents\\GitHub\\XORFIT\\client\\xorfit\\src\\components\\Register.js":"7","C:\\Users\\karigar_s\\Documents\\GitHub\\XORFIT\\client\\xorfit\\src\\components\\Options.js":"8","C:\\Users\\karigar_s\\Documents\\GitHub\\XORFIT\\client\\xorfit\\src\\components\\Meditation.js":"9","C:\\Users\\karigar_s\\Documents\\GitHub\\XORFIT\\client\\xorfit\\src\\components\\Login.js":"10","C:\\Users\\karigar_s\\Documents\\GitHub\\XORFIT\\client\\xorfit\\src\\components\\Player.js":"11","C:\\Users\\karigar_s\\Documents\\GitHub\\XORFIT\\client\\xorfit\\src\\components\\Controls.js":"12","C:\\Users\\karigar_s\\Documents\\GitHub\\XORFIT\\client\\xorfit\\src\\components\\Details.js":"13"},{"size":565,"mtime":1608128724465,"results":"14","hashOfConfig":"15"},{"size":375,"mtime":1608128724467,"results":"16","hashOfConfig":"15"},{"size":1284,"mtime":1608288881059,"results":"17","hashOfConfig":"15"},{"size":376,"mtime":1608135436127,"results":"18","hashOfConfig":"15"},{"size":723,"mtime":1608206873499,"results":"19","hashOfConfig":"15"},{"size":1846,"mtime":1608206465514,"results":"20","hashOfConfig":"15"},{"size":5973,"mtime":1608229971507,"results":"21","hashOfConfig":"15"},{"size":5214,"mtime":1608288881135,"results":"22","hashOfConfig":"15"},{"size":3580,"mtime":1608288881107,"results":"23","hashOfConfig":"15"},{"size":4302,"mtime":1608230265146,"results":"24","hashOfConfig":"15"},{"size":1574,"mtime":1608288881170,"results":"25","hashOfConfig":"15"},{"size":821,"mtime":1608281427596,"results":"26","hashOfConfig":"15"},{"size":423,"mtime":1608288881064,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1thu545",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"45"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\karigar_s\\Documents\\GitHub\\XORFIT\\client\\xorfit\\src\\index.js",[],"C:\\Users\\karigar_s\\Documents\\GitHub\\XORFIT\\client\\xorfit\\src\\reportWebVitals.js",[],"C:\\Users\\karigar_s\\Documents\\GitHub\\XORFIT\\client\\xorfit\\src\\App.js",["57"],"C:\\Users\\karigar_s\\Documents\\GitHub\\XORFIT\\client\\xorfit\\src\\components\\Home.js",[],"C:\\Users\\karigar_s\\Documents\\GitHub\\XORFIT\\client\\xorfit\\src\\components\\Nav.js",[],"C:\\Users\\karigar_s\\Documents\\GitHub\\XORFIT\\client\\xorfit\\src\\components\\Yoga.js",[],"C:\\Users\\karigar_s\\Documents\\GitHub\\XORFIT\\client\\xorfit\\src\\components\\Register.js",[],"C:\\Users\\karigar_s\\Documents\\GitHub\\XORFIT\\client\\xorfit\\src\\components\\Options.js",["58","59","60","61"],"import React, { Component } from \"react\";\r\nimport yoga from \"../yoga1.jpg\";\r\nimport yogaButton from \"../yoga-button.png\";\r\nimport meditationButton from \"../meditation-button.png\";\r\nimport excerciseButton from \"../excercise-button.png\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class Options extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.myRef = React.createRef();\r\n    this.state = {\r\n      min: \"0\",\r\n      sec: \"0\",\r\n      time: \"0\",\r\n      showMedOptions: false,\r\n    };\r\n  }\r\n  handelChange = (e) => {\r\n    this.setState({ option: e.target.name });\r\n    if (e.target.name === \"yogaButton\") {\r\n      this.props.history.push(\"/yoga\");\r\n    } else if (e.target.name === \"excerciseButton\") {\r\n      this.props.history.push(\"/excercise\");\r\n    } else {\r\n      this.setState({\r\n        showMedOptions: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  onMedClick = (e) => {\r\n    console.log(e.target.name);\r\n    this.props.history.push(\"/meditation/\" + e.target.name);\r\n  };\r\n\r\n  setClock = (e) => {\r\n    this.setState({\r\n      time: this.state.min + \":\" + this.state.sec,\r\n    });\r\n    e.target.style.display = \"none\";\r\n  };\r\n\r\n  onTimeChange = (e) => {\r\n    // console.log(e.target)\r\n    if (e.target.value <= 60) {\r\n      this.setState({\r\n        [e.target.name]: e.target.value,\r\n      });\r\n    } else {\r\n      alert(\"Enter Valid Time\");\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <br />\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6\">\r\n            <img src={yoga} className=\"imageAnim\" alt=\"Yoga\" />\r\n          </div>\r\n\r\n          <div className=\"col-md-6\">\r\n            <div id=\"alarm-dialog\">\r\n              <h2>Set Timer</h2>\r\n\r\n              <label className=\"minutes\">\r\n                Minutes\r\n                <input\r\n                  type=\"number\"\r\n                  min=\"0\"\r\n                  max=\"60\"\r\n                  value={this.state.min}\r\n                  name=\"min\"\r\n                  onChange={this.onTimeChange}\r\n                  placeholder=\"0\"\r\n                />\r\n              </label>\r\n              <span id=\"alarm-colon\">:</span>\r\n              <label className=\"seconds\">\r\n                Seconds\r\n                <input\r\n                  type=\"number\"\r\n                  min=\"0\"\r\n                  max=\"60\"\r\n                  value={this.state.sec}\r\n                  name=\"sec\"\r\n                  onChange={this.onTimeChange}\r\n                  placeholder=\"0\"\r\n                />\r\n              </label>\r\n\r\n              <div className=\"button-holder\">\r\n                <button\r\n                  id=\"alarm-set\"\r\n                  className=\"btn btn-alarm\"\r\n                  style={{ width: \"20%\" }}\r\n                  onClick={this.setClock}\r\n                  ref={this.myRef}\r\n                >\r\n                  Set\r\n                </button>\r\n                <button\r\n                  id=\"alarm-clear\"\r\n                  className=\"btn btn-alarm\"\r\n                  style={{ width: \"20%\" }}\r\n                  onClick={() => {\r\n                    this.myRef.current.style.display = \"inline\";\r\n                    this.setState({\r\n                      min: 0,\r\n                      sec: 0,\r\n                    });\r\n                  }}\r\n                >\r\n                  Clear\r\n                </button>\r\n              </div>\r\n            </div>\r\n\r\n            <div id=\"activity-dialog\">\r\n              <h2>Select Activity</h2>\r\n              <button className=\"btn\">\r\n                <img\r\n                  src={yogaButton}\r\n                  height=\"140\"\r\n                  name=\"yogaButton\"\r\n                  onClick={this.handelChange}\r\n                ></img>\r\n              </button>\r\n              <button className=\"btn\">\r\n                <img\r\n                  src={meditationButton}\r\n                  height=\"140\"\r\n                  name=\"meditationButton\"\r\n                  onClick={this.handelChange}\r\n                ></img>\r\n              </button>\r\n              <button className=\"btn\">\r\n                <img\r\n                  src={excerciseButton}\r\n                  height=\"140\"\r\n                  name=\"excerciseButton\"\r\n                  onClick={this.handelChange}\r\n                ></img>\r\n              </button>\r\n            </div>\r\n            {this.state.showMedOptions ? (\r\n              <div id=\"med-dialog\">\r\n                <h2>Select Meditation Type</h2>\r\n                <button\r\n                  className=\"btn btn-alarm\"\r\n                  name=\"mindfullness\"\r\n                  onClick={this.onMedClick}\r\n                >\r\n                  Mindfulness\r\n                </button>\r\n                <button\r\n                  className=\"btn btn-alarm\"\r\n                  name=\"stress\"\r\n                  onClick={this.onMedClick}\r\n                >\r\n                  Stress Relieve\r\n                </button>\r\n                <button\r\n                  className=\"btn btn-alarm\"\r\n                  name=\"anxiety\"\r\n                  onClick={this.onMedClick}\r\n                >\r\n                  Anxiety Relieve\r\n                </button>\r\n              </div>\r\n            ) : null}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n",["62","63"],"C:\\Users\\karigar_s\\Documents\\GitHub\\XORFIT\\client\\xorfit\\src\\components\\Meditation.js",["64","65"],"import { useState, useEffect } from \"react\";\r\nimport Player from \"./Player\";\r\nimport bg from \"../bg.jpg\";\r\n\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nfunction Meditation() {\r\n  let location = useLocation();\r\n  const locationVariable = location.pathname.split(\"/\");\r\n  console.log(locationVariable);\r\n  const [songs] = useState([\r\n    {\r\n      title: \"Mindfullness\",\r\n      artist: \"Help Guide\",\r\n      img_src: \"./images/song-3.jpg\",\r\n      src: \"./audioFile/song1.mp3\",\r\n      category: \"stress\",\r\n      time: 5,\r\n    },\r\n    {\r\n      title: \"Breathing Meditation\",\r\n      artist: \"Help Guide\",\r\n      img_src: \"./images/song-4.jpg\",\r\n      src: \"./audioFile/song2.mp3\",\r\n      category: \"mindfullness\",\r\n      time: 10,\r\n    },\r\n    {\r\n      title: \"Breathing Meditation\",\r\n      artist: \"Help Guide\",\r\n      img_src: \"./images/song-2.jpg\",\r\n      src: \"./audioFile/song3.mp3\",\r\n      category: \"anxiety\",\r\n      time: 5,\r\n    },\r\n  ]);\r\n\r\n  const [currentSongIndex, setCurrentSongIndex] = useState(0);\r\n  const [nextSongIndex, setNextSongIndex] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setNextSongIndex(() => {\r\n      if (currentSongIndex + 1 > songs.length - 1) {\r\n        return 0;\r\n      } else {\r\n        return currentSongIndex + 1;\r\n      }\r\n    });\r\n  }, [currentSongIndex]);\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-md-4\">\r\n        <div\r\n          class=\"card\"\r\n          style={{\r\n            width: \"80%\",\r\n            height: \"100%\",\r\n            borderRadius: \"0px\",\r\n            background: \"#755139FF\",\r\n          }}\r\n        >\r\n          <div class=\"card-body\">\r\n            <h4\r\n              style={{\r\n                textAlign: \"center\",\r\n                marginTop: \"10px\",\r\n                fontWeight: \"bold\",\r\n                color: \"white\",\r\n              }}\r\n            >\r\n              Play List\r\n            </h4>\r\n            <br />\r\n            {songs.map((s) => {\r\n              return (\r\n                <div className=\"mt-3\">\r\n                  <div className=\"row\" style={{}}>\r\n                    <div className=\"col-3\">\r\n                      <img\r\n                        src={s.img_src}\r\n                        alt=\"\"\r\n                        style={{\r\n                          width: \"50px\",\r\n                          height: \"50px\",\r\n                          borderRadius: \"30px\",\r\n                        }}\r\n                      />\r\n                    </div>\r\n                    <div className=\"col\" style={{ color: \"white\" }}>\r\n                      <h5 class=\"card-title\">{s.title}</h5>\r\n                      <p\r\n                        class=\"card-text\"\r\n                        style={{\r\n                          marginTop: \"-10px\",\r\n                          fontSize: \"14px\",\r\n                          marginBottom: \"10px\",\r\n                        }}\r\n                      >\r\n                        {s.artist} ( {s.time}:00 ) Mins\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"app col\" style={{ marginLeft: \"-130px\" }}>\r\n        <div className=\"ocean\">\r\n          <div className=\"wave\"></div>\r\n          <div className=\"wave\"></div>\r\n        </div>\r\n\r\n        <Player\r\n          currentSongIndex={currentSongIndex}\r\n          setCurrentSongIndex={setCurrentSongIndex}\r\n          nextSongIndex={nextSongIndex}\r\n          songs={songs}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Meditation;\r\n","C:\\Users\\karigar_s\\Documents\\GitHub\\XORFIT\\client\\xorfit\\src\\components\\Login.js",["66"],"C:\\Users\\karigar_s\\Documents\\GitHub\\XORFIT\\client\\xorfit\\src\\components\\Player.js",[],"C:\\Users\\karigar_s\\Documents\\GitHub\\XORFIT\\client\\xorfit\\src\\components\\Controls.js",[],"C:\\Users\\karigar_s\\Documents\\GitHub\\XORFIT\\client\\xorfit\\src\\components\\Details.js",[],{"ruleId":"67","severity":1,"message":"68","line":1,"column":8,"nodeType":"69","messageId":"70","endLine":1,"endColumn":11},{"ruleId":"67","severity":1,"message":"71","line":6,"column":10,"nodeType":"69","messageId":"70","endLine":6,"endColumn":14},{"ruleId":"72","severity":1,"message":"73","line":99,"column":43,"nodeType":"74","endLine":99,"endColumn":124},{"ruleId":"72","severity":1,"message":"73","line":100,"column":43,"nodeType":"74","endLine":100,"endColumn":136},{"ruleId":"72","severity":1,"message":"73","line":101,"column":43,"nodeType":"74","endLine":101,"endColumn":134},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"67","severity":1,"message":"79","line":3,"column":8,"nodeType":"69","messageId":"70","endLine":3,"endColumn":10},{"ruleId":"80","severity":1,"message":"81","line":41,"column":6,"nodeType":"82","endLine":41,"endColumn":24,"suggestions":"83"},{"ruleId":"84","severity":1,"message":"85","line":131,"column":17,"nodeType":"74","endLine":131,"endColumn":29},"no-unused-vars","'Nav' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-native-reassign",["86"],"no-negated-in-lhs",["87"],"'bg' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'songs.length'. Either include it or remove the dependency array.","ArrayExpression",["88"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation",{"desc":"89","fix":"90"},"Update the dependencies array to be: [currentSongIndex, songs.length]",{"range":"91","text":"92"},[1012,1030],"[currentSongIndex, songs.length]"]